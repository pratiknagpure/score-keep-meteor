{
  "_args": [
    [
      {
        "raw": "react-flip-move@2.7.2",
        "scope": null,
        "escapedName": "react-flip-move",
        "name": "react-flip-move",
        "rawSpec": "2.7.2",
        "spec": "2.7.2",
        "type": "version"
      },
      "/Users/sudheerbandaru/Desktop/meteor-projects/score-keep"
    ]
  ],
  "_from": "react-flip-move@2.7.2",
  "_id": "react-flip-move@2.7.2",
  "_inCache": true,
  "_location": "/react-flip-move",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-flip-move-2.7.2.tgz_1480888979091_0.8930863118730485"
  },
  "_npmUser": {
    "name": "joshwcomeau",
    "email": "joshwcomeau+npm@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-flip-move@2.7.2",
    "scope": null,
    "escapedName": "react-flip-move",
    "name": "react-flip-move",
    "rawSpec": "2.7.2",
    "spec": "2.7.2",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-flip-move/-/react-flip-move-2.7.2.tgz",
  "_shasum": "5e7b9b127651486363e2bfcd1f24c95340001c7a",
  "_shrinkwrap": null,
  "_spec": "react-flip-move@2.7.2",
  "_where": "/Users/sudheerbandaru/Desktop/meteor-projects/score-keep",
  "author": {
    "name": "Joshua Comeau",
    "email": "joshwcomeau@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/joshwcomeau/react-flip-move/issues"
  },
  "dependencies": {},
  "description": "Effortless animation between DOM changes (eg. list reordering) using the FLIP technique.",
  "devDependencies": {
    "@kadira/storybook": "2.30.1",
    "babel": "6.1.18",
    "babel-cli": "6.2.0",
    "babel-core": "6.2.1",
    "babel-eslint": "5.0.0-beta4",
    "babel-loader": "6.2.1",
    "babel-plugin-add-module-exports": "0.1.1",
    "babel-plugin-transform-decorators-legacy": "1.3.4",
    "babel-plugin-transform-object-assign": "6.3.13",
    "babel-preset-es2015": "6.1.18",
    "babel-preset-react": "6.3.13",
    "babel-preset-stage-0": "6.1.18",
    "chai": "3.5.0",
    "css-loader": "0.23.1",
    "eslint": "3.10.0",
    "eslint-config-airbnb": "12.0.0",
    "eslint-plugin-import": "1.16.0",
    "eslint-plugin-jsx-a11y": "2.2.3",
    "karma": "0.13.19",
    "karma-chai": "0.1.0",
    "karma-chrome-launcher": "0.2.2",
    "karma-mocha": "0.2.1",
    "karma-sinon": "1.0.4",
    "karma-sinon-chai": "1.1.0",
    "karma-sourcemap-loader": "0.3.7",
    "karma-webpack": "1.7.0",
    "lodash": "4.3.0",
    "mocha": "2.4.5",
    "react": "15.2.1",
    "react-addons-test-utils": "15.0.0",
    "react-dom": "15.0.0",
    "sinon": "1.17.3",
    "sinon-chai": "2.8.0",
    "style-loader": "0.13.1",
    "webpack": "1.12.11"
  },
  "directories": {},
  "dist": {
    "shasum": "5e7b9b127651486363e2bfcd1f24c95340001c7a",
    "tarball": "https://registry.npmjs.org/react-flip-move/-/react-flip-move-2.7.2.tgz"
  },
  "files": [
    "dist",
    "lib",
    "src"
  ],
  "gitHead": "29ab9b3632ca0a7292d11ddb0d5377b0766f9525",
  "homepage": "https://github.com/joshwcomeau/react-flip-move#readme",
  "keywords": [
    "react",
    "react-dom",
    "animation",
    "magic-move",
    "component",
    "react-component",
    "flip",
    "web-animations"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "joshwcomeau",
      "email": "joshwcomeau+npm@gmail.com"
    }
  ],
  "name": "react-flip-move",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "0.13.x || 0.14.x || 15.x.x",
    "react-dom": "0.13.x || 0.14.x || 15.x.x"
  },
  "readme": "React Flip Move\n=========\n\n[![Join the chat at https://gitter.im/react-flip-move/Lobby](https://badges.gitter.im/react-flip-move/Lobby.svg)](https://gitter.im/react-flip-move/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![build status](https://travis-ci.org/joshwcomeau/react-flip-move.svg?branch=master)](https://travis-ci.org/joshwcomeau/react-flip-move)\n[![npm version](https://img.shields.io/npm/v/react-flip-move.svg)](https://www.npmjs.com/package/react-flip-move)\n[![npm monthly downloads](https://img.shields.io/npm/dm/react-flip-move.svg)](https://www.npmjs.com/package/react-flip-move)\n\n\n\nThis module was built to tackle the common but arduous problem of animating a list of items when the list's order changes.\n\nCSS transitions only work for CSS properties. If your list is shuffled, the items have rearranged themselves, but without the use of CSS. The DOM nodes don't know that their on-screen location has changed; they've just been removed and inserted elsewhere in the document.\n\nFlip Move uses the [_FLIP technique_](https://aerotwist.com/blog/flip-your-animations/#the-general-approach) to work out what such a transition would look like, and fakes it using 60+ FPS hardware-accelerated CSS transforms.\n\n[![demo](https://s3.amazonaws.com/githubdocs/fm-main-demo.gif)](http://joshwcomeau.github.io/react-flip-move/examples/#/shuffle)\n\n\n\n## Demos\n\n  * <a href=\"http://joshwcomeau.github.io/react-flip-move/examples/#/shuffle\" target=\"_blank\">__List/Grid Shuffle__</a>\n  * <a href=\"http://joshwcomeau.github.io/react-flip-move/examples/#/square\" target=\"_blank\">__Fuscia Square__</a>\n  * <a href=\"http://joshwcomeau.github.io/react-flip-move/examples/#/scrabble\" target=\"_blank\">__Scrabble__</a>\n  * <a href=\"http://joshwcomeau.github.io/react-flip-move/examples/#/laboratory\" target=\"_blank\">__Laboratory__</a>\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Features](#features)\n* [Quickstart](#quickstart)\n* [Compatibility](#compatibility)\n* [Enter/Leave Animations](#enterleave-animations)\n* [Options](#options)\n  * [children](#children)\n  * [easing](#easing)\n  * [duration](#duration)\n  * [delay](#delay)\n  * [staggerDurationBy](#staggerdurationby)\n  * [staggerDelayBy](#staggerdelayby)\n  * [enterAnimation](#enteranimation)\n  * [leaveAnimation](#leaveanimation)\n  * [maintainContainerHeight](#maintaincontainerheight)\n  * [onStart](#onstart)\n  * [onFinish](#onfinish)\n  * [onStartAll](#onstartall)\n  * [onFinishAll](#onfinishall)\n  * [style](#style)\n  * [className](#classname)\n  * [typeName](#typename)\n  * [disableAllAnimations](#disableallanimations)\n  * [getPosition](#getPosition)\n  * [HTML Attributes](#html-attributes)\n* [Gotchas](#gotchas)\n* [Changelog](#changelog)\n* [Contributions](#contributions)\n* [Development](#development)\n* [License](#license)\n\n\n\n## Installation\n\n```\nnpm i -S react-flip-move\n```\n\nUMD builds are also available via CDN:\n* [react-flip-move.js](https://unpkg.com/react-flip-move@2.1.4/dist/react-flip-move.js)\n* [react-flip-move.min.js](https://unpkg.com/react-flip-move@2.1.4/dist/react-flip-move.min.js)\n\n\n## Features\n\nFlip Move was inspired by Ryan Florence's awesome <a href=\"https://github.com/ryanflorence/react-magic-move\" target=\"_blank\">_Magic Move_</a>, and offers:\n\n  * Full compatibility with React 0.13, 0.14, and 15. Will be maintained.\n\n  * Exclusive use of hardware-accelerated CSS properties (`transform: translate`) instead of positioning properties (`top`, `left`). <a href=\"https://aerotwist.com/blog/pixels-are-expensive/\" target=\"_blank\">_Read why this matters_</a>.\n\n  * Full support for enter/exit animations, including some spiffy presets, that all leverage hardware-accelerated CSS properties.\n\n  * Ability to 'humanize' transitions by staggering the delay and/or duration of subsequent elements.\n\n  * Ability to provide `onStart` / `onFinish` callbacks.\n\n  * Implementation based on the [_FLIP technique_](https://medium.com/developers-writing/animating-the-unanimatable-1346a5aab3cd), a beautiful-in-its-simplicity method of tackling this problem. UMD build, when minified and gzipped, is only 6kb! ⚡\n\n\n\n## Quickstart\n\nThe implementation couldn't be simpler. Just wrap the items you'd like to move in a `FlipMove`, with any [custom options](#options):\n\n```js\nimport FlipMove from 'react-flip-move';\n\nclass TopArticles extends Component {\n  renderTopArticles() {\n    return this.props.articles.map( article => <Article {...article} key={article.id} /> );\n  }\n\n  render() {\n    return (\n      <div className=\"top-articles\">\n        <FlipMove easing=\"cubic-bezier(0, 0.7, 0.8, 0.1)\">\n          { this.renderTopArticles() }\n        </FlipMove>\n      </div>\n    );\n  }\n}\n```\n\n\n\n## Compatibility\n\n|           | Chrome | Firefox | Safari |   IE  | Edge | iOS Safari/Chrome | Android Chrome |\n|-----------|:------:|:-------:|:------:|:-----:|:----:|:-----------------:|:--------------:|\n| Supported |  ✔ 10+ |   ✔ 4+  | ✔ 6.1+ | ✔ 10+ |   ✔  |       ✔ 6.1+      |        ✔       |\n\n\n\n## How It Works\n\nCurious how this works, under the hood? [__Read the Medium post__](https://medium.com/@joshuawcomeau/animating-the-unanimatable-1346a5aab3cd).\n\n\n\n## Enter/Leave Animations\n\n\n\n\n## Options\n\n### `children`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Array`, `Object` | `undefined` |\n\n\nThe children passed to FlipMove are the component(s) or DOM element(s) that will be moved about. Accepts either a single child (as long as it has a unique `key` property) or an array of children.\n\n---\n\n### `easing`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `String` | \"ease-in-out\" |\n\n\nAny valid CSS3 timing function (eg. \"linear\", \"ease-in\", \"cubic-bezier(1, 0, 0, 1)\").\n\n---\n\n### `duration`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Number` | `350` |\n\n\nThe length, in milliseconds, that the transition ought to take.\n\n\n---\n\n### `delay`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Number` | `0` |\n\n\nThe length, in milliseconds, to wait before the animation begins.\n\n---\n\n### `staggerDurationBy`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Number` | `0` |\n\n\nThe length, in milliseconds, to be added to the duration of each subsequent element.\n\nFor example, if you are animating 4 elements with a `duration` of 200 and a `staggerDurationBy` of 20:\n\n* The first element will take 200ms to transition.\n* The second element will take 220ms to transition.\n* The third element will take 240ms to transition.\n* The fourth element will take 260ms to transition.\n\nThis effect is great for \"humanizing\" transitions and making them feel less robotic.\n\n---\n\n### `staggerDelayBy`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Number` | `0` |\n\n\nThe length, in milliseconds, to be added to the delay of each subsequent element.\n\nFor example, if you are animating 4 elements with a `delay` of 0 and a `staggerDelayBy` of 20:\n\n* The first element will start transitioning immediately.\n* The second element will start transitioning after 20ms.\n* The third element will start transitioning after 40ms.\n* The fourth element will start transitioning after 60ms.\n\nSimilarly to staggerDurationBy, This effect is great for \"humanizing\" transitions and making them feel less robotic.\n\n**Protip:** You can make elements animate one-at-a-time by using an identical `duration` and `staggerDelayBy`.\n\n---\n\n### `enterAnimation`\n\n| **Accepted Types:**            | **Default Value** |\n|--------------------------------|-------------------|\n|  `String`, `Boolean`, `Object` | 'elevator'        |\n\nControl the onEnter animation that runs when new items are added to the DOM. For examples of this property, see the [**feature description above**](#enterleave-animations).\n\nAccepts several types:\n\n**String:** You can enter one of the following presets to select that as your enter animation:\n  * `elevator` (default)\n  * `fade`\n  * `accordionVertical`\n  * `accordionHorizontal`\n  * `none`\n\n[View the CSS implementation of these presets](https://github.com/joshwcomeau/react-flip-move/blob/master/src/enter-leave-presets.js).\n\n**Boolean:** You can enter `false` to disable the enter animation, or `true` to select the default enter animation (elevator).\n\n**Object:** For fully granular control, you can pass in an object that contains the styles you'd like to animate.\n\nIt requires two keys: `from` and `to`. Each key holds an object of CSS properties. You can supply any valid camelCase CSS properties, and flip-move will transition between the two, over the course of the specified `duration`.\n\nExample:\n\n```js\nconst customEnterAnimation = {\n  from: { transform: 'scale(0.5, 1)' },\n  to:   { transform: 'scale(1, 1)' }\n};\n\n<FlipMove enterAnimation={customEnterAnimation}>\n  {renderChildren()}\n</FlipMove>\n```\n\nIt is recommended that you stick to hardware-accelerated CSS properties for optimal performance: transform and opacity.\n\n---\n\n### `leaveAnimation`\n\n| **Accepted Types:**            | **Default Value** |\n|--------------------------------|-------------------|\n|  `String`, `Boolean`, `Object` | 'elevator'        |\n\nControl the onLeave animation that runs when new items are removed from the DOM. For examples of this property, see the [**feature description above**](#enterleave-animations).\n\nThis property functions identically to `enterAnimation`.\n\nAccepts several types:\n\n**String:** You can enter one of the following presets to select that as your enter animation:\n  * `elevator` (default)\n  * `fade`\n  * `accordionVertical`\n  * `accordionHorizontal`\n  * `none`\n\n[View the CSS implementation of these presets](https://github.com/joshwcomeau/react-flip-move/blob/master/src/enter-leave-presets.js).\n\n**Boolean:** You can enter `false` to disable the leave animation, or `true` to select the default leave animation (elevator).\n\n**Object:** For fully granular control, you can pass in an object that contains the styles you'd like to animate.\n\nIt requires two keys: `from` and `to`. Each key holds an object of CSS properties. You can supply any valid camelCase CSS properties, and flip-move will transition between the two, over the course of the specified `duration`.\n\nExample:\n\n```js\nconst customLeaveAnimation = {\n  from: { transform: 'scale(1, 1)' },\n  to:   { transform: 'scale(0.5, 1) translateY(-20px)' }\n};\n\n<FlipMove leaveAnimation={customLeaveAnimation}>\n  {renderChildren()}\n</FlipMove>\n```\n\nIt is recommended that you stick to hardware-accelerated CSS properties for optimal performance: transform and opacity.\n\n---\n\n### `maintainContainerHeight`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Boolean`          | `false`           |\n\nDo not collapse container height until after leaving animations complete.\n\nWhen `false`, children are immediately removed from the DOM flow as they animate away. Setting this value to `true` will maintain the height of the container until after their leaving animation completes.\n\n---\n\n### `onStart`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Function`         | `undefined`       |\n\n\nA callback to be invoked **once per child element** at the start of the animation.\n\nThe callback is invoked with two arguments:\n\n* `childElement`: A reference to the React Element being animated.\n* `domNode`: A reference to the unadulterated DOM node being animated.\n\nIn general, it is advisable to ignore the `domNode` argument and work with the `childElement`. The `domNode` is just an escape hatch for doing complex things not otherwise possible.\n\n---\n\n### `onFinish`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Function`         | `undefined`       |\n\n\nA callback to be invoked **once per child element** at the end of the animation.\n\nThe callback is invoked with two arguments:\n\n* `childElement`: A reference to the React Element being animated.\n* `domNode`: A reference to the unadulterated DOM node being animated.\n\nIn general, it is advisable to ignore the `domNode` argument and work with the `childElement`. The `domNode` is just an escape hatch for doing complex things not otherwise possible.\n\n---\n\n### `onStartAll`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Function`         | `undefined`       |\n\n\nA callback to be invoked **once per group** at the start of the animation.\n\nThe callback is invoked with two arguments:\n\n* `childElements`: An array of the references to the React Element(s) being animated.\n* `domNodes`: An array of the references to the unadulterated DOM node(s) being animated.\n\nThese arguments are similar to the ones provided for `onStart`, except we provide an *array* of the elements and nodes. The order of both arguments is guaranteed; this means you can use a zipping function like [lodash's .zip](https://lodash.com/docs#zip) to get pairs of element/node, if needed.\n\nIn general, it is advisable to ignore the `domNodes` argument and work with the `childElements`. The `domNodes` are just an escape hatch for doing complex things not otherwise possible.\n\n---\n\n### `onFinishAll`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Function`         | `undefined`       |\n\n\nA callback to be invoked **once per group** at the end of the animation.\n\nThe callback is invoked with two arguments:\n\n* `childElements`: An array of the references to the React Element(s) being animated.\n* `domNodes`: An array of the references to the unadulterated DOM node(s) being animated.\n\nThese arguments are similar to the ones provided for `onFinish`, except we provide an *array* of the elements and nodes. The order of both arguments is guaranteed; this means you can use a zipping function like [lodash's .zip](https://lodash.com/docs#zip) to get pairs of element/node, if needed.\n\nIn general, it is advisable to ignore the `domNodes` argument and work with the `childElements`. The `domNodes` are just an escape hatch for doing complex things not otherwise possible.\n\n---\n\n### `typeName`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `String`           | 'div'             |\n\n\nFlip Move wraps your children in a container element. By default, this element is a `div`, but you may wish to provide a custom HTML element (for example, if your children are list items, you may wish to set this to `ul`).\n\nAny valid HTML element type is accepted, but peculiar things may happen if you use an unconventional element.\n\n---\n\n### `disableAllAnimations`\n\n| **Accepted Types:** | **Default Value** |\n|---------------------|-------------------|\n|  `Boolean`          | `false`           |\n\n\nSometimes, you may wish to temporarily disable the animations and have the normal behaviour resumed. Setting this flag to `true` skips all animations.\n\n---\n\n### `getPosition`\n\n| **Accepted Types:** | **Default Value**       |\n|---------------------|-------------------------|\n|  `Function`         | `getBoundingClientRect` |\n\n\nThis function is called with a DOM node as the only argument. It should return an object as specified by the [getBoundingClientRect() spec](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).\n\nFor normal usage of FlipMove you won't need this. An example of usage is when FlipMove is used in a container that is scaled using CSS. You can correct the values from `getBoundingClientRect` by using this prop.\n\n---\n\n### HTML Attributes\n\nFlipMove creates its own DOM node to wrap the children it needs to animate. Sometimes, you'll want to be able to pass specific HTML attributes to this node.\n\nAll props other than the ones listed above will be delegated to this new node, so you can apply them directly to FlipMove. For example:\n\n```html\n<div>\n  <FlipMove typeName=\"ul\" className=\"row\" style={{ backgroundColor: 'red' }}>\n    <li className=\"col\">Column 1</li>\n    <li className=\"col\">Column 2</li>\n  </FlipMove>\n</div>\n```\n\nFlipMove passes the `className` and `style` props along to the `ul` that needs to be created. Here's how it renders:\n\n```html\n<div>\n  <ul class=\"row\" style=\"background-color: red\">\n    <li class=\"col\">Column 1</li>\n    <li class=\"col\">Column 2</li>\n  </ul>\n</div>\n```\n\nThis works for all HTML props - there's no validation.\n\n---\n\n## Changelog\n\nSee the [GitHub releases](https://github.com/joshwcomeau/react-flip-move/releases) for version changes.\n\n---\n\n## Gotchas\n\n  * Does not work with stateless functional component children. This is because Flip Move uses refs to identify and apply styles to children, and stateless functional components cannot be given refs.\n\n  * All children **need a unique `key` property**. Even if Flip Move is only given a single child, it needs to have a unique `key` prop for Flip Move to track it.\n\n  * Elements whose positions have not changed between states will not be animated. This means that no `onStart` or `onFinish` callbacks will be executed for those elements.\n\n  * Sometimes you'll want to update or change an item _without_ triggering a Flip Move animation. For example, with optimistic updating, you may render a temporary version before replacing it with the server-validated one. In this case, simply use the same `key` for both versions, and Flip Move will treat them as the same item.\n\n\n---\n\n\n## Known Issues\n\n  * **Interrupted enter/leave animations can be funky**. If enter/leave animations are interrupted, odd quirks can occur. It's generally fine if they're batched, but spamming a `remove item` button causes items to jump around.\n\n  * **Existing transition/transform properties will be overridden.** I am hoping to change this in a future version, but at present, Flip Move does not take into account existing `transition` or `transform` CSS properties on its direct children.\n\n\n---\n\n## Note on `will-change`\n\nTo fully benefit from hardware acceleration, each item being translated should have its own compositing layer. This can be accomplished with the [CSS will-change property](https://dev.opera.com/articles/css-will-change-property/).\n\nApplying `will-change` too willy-nilly, though, can have an adverse effect on mobile browsers, so I have opted to not use it at all.\n\nIn my personal experimentations on modern versions of Chrome, Safari, Firefox and IE, this property offers little to no gain (in Chrome's timeline I saw a savings of ~0.5ms on a 24-item shuffle).\n\nYMMV: Feel free to experiment with the property in your CSS. Flip Move will respect the wishes of your stylesheet :)\n\nFurther reading: [CSS will-change Property](https://dev.opera.com/articles/css-will-change-property/)\n\n\n\n## Contributions\n\nContributors welcome! Please discuss new features with me ahead of time, and submit PRs for bug fixes with tests (Testing stack is Mocha/Chai/Sinon, tested in-browser by Karma).\n\n\n## Development\n\nThis project uses [React Storybook](https://github.com/kadirahq/react-storybook) in development. The developer experience is absolutely lovely, and it makes testing new features like enter/leave presets super straightforward.\n\nAfter installing dependencies, launch the Storybook dev server with `npm run storybook`.\n\n\n\n## License\n\n[MIT](https://github.com/joshwcomeau/flip-move/blob/master/LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joshwcomeau/react-flip-move.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:umd && npm run build:umd:min",
    "build:lib": "babel src --out-dir lib",
    "build:umd": "webpack src/index.js dist/react-flip-move.js --config webpack.config.production.js",
    "build:umd:min": "webpack src/index.js dist/react-flip-move.min.js --config webpack.config.production.min.js",
    "lint": "eslint src",
    "prepublish": "npm run build",
    "storybook": "start-storybook -p 9001",
    "test": "karma start --single-run",
    "test:dev": "karma start karma.conf.js"
  },
  "version": "2.7.2"
}
